<%- include('../includes/head.ejs') %>
    <link rel="stylesheet" href="/css/about.css">
<%- include('../includes/start.ejs') %>

    <%- include('../includes/navigation.ejs') %>
    <main class="main-entry">
        <section class="about">
            <h2>About Verbosity: The Website Word Analyzer</h2>
            <p>
                Welcome to Verbosity, an awesome system developed by
                <a href="https://zakwarren.github.io/" target="_blank">Zak Warren</a>!
            </p>
            <p>
                This web app takes in a URL and attempts to scrape all
                the words from the website it points to. It then analyses
                these words and presents it back to you.
            </p>
            <h3>Analytical Rules</h3>
            <p>
                Before analysing the word list, it cleans out all the (English)
                stop words. Stop words are some of the most common words used in
                the language and don't necessarily hold meaning on their own, but
                help understanding by joining meaningful words together into
                coherent sentences.
            </p>
            <p>
                <div class="accordion">The stop words excluded from this web app's analysis are...</div>
                <ul class="panel-accordion">
                    <% stopWords.forEach(word => { %>
                        <li><%= word %></li>
                    <% }); %>
                </ul>
            </p>
            <h3>Computer Generated Blog</h3>
            <p>
                As part of the analysis of the website, this web app generates
                a blog using the words it finds. This blog uses Markov Chains,
                which analyse the frequency that words appear in a sample
                (known as a corpus) to inform its probability model. The more
                words in the model, the more accurate it can become.
            </p>
            <p>
                The web app supplies a random word from the corpus to seed the blog.
                It then selects the next word based on the probability of the words
                that tend to follow this word in the source material. It does this
                sequentially until it reaches the defined limit or runs out of likely
                following words.
            </p>
            <p>
                This form of computer generated text is based purely on the frequency
                of word use by the author of the source material. It doesn't attempt
                to produce sentences with any deeper meaning, so can often produce
                text that is difficult to read or obviously random.
            </p>
        </section>
    </main>

    <script src="/scripts/accordion.js"></script>

<%- include('../includes/end.ejs') %>